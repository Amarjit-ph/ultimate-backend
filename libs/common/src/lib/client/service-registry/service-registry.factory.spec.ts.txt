/*******************************************************************************
 * Copyright (c) 2021. Rex Isaac Raphael
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * File name:         service-registry.factory.spec.ts
 * Last modified:     09/02/2021, 20:42
 ******************************************************************************/

import { ServiceRegistryFactory } from './service-registry.factory';
import { createMock } from 'ts-auto-mock';
import { Registration } from './registration';
import { ServiceRegistry } from './service-registry';

describe('ServiceRegistryFactory', () => {
  let serviceRegistry: ServiceRegistry<Registration>;
  let registration: Registration;

  beforeEach(() => {
    serviceRegistry = createMock<ServiceRegistry<Registration>>();
    registration = createMock<Registration>();
  });

  it('throw if registration is null', async () => {
    const t = () => ServiceRegistryFactory.getInstance(null, null);
    expect(t).toThrowError('an instance of Registration is required');
  });

  it('throw if service registration is null', async () => {
    const t = () => ServiceRegistryFactory.getInstance(registration, null);
    expect(t).toThrowError('an instance of serviceRegistry is required');
  });

  it('register and deregister service works', async () => {
    const sr = ServiceRegistryFactory.getInstance(
      registration,
      serviceRegistry
    );
    expect(await sr.register()).toBeUndefined();
    expect(await sr.register()).toBeUndefined();
    expect(await sr.deregister()).toBeUndefined();
  });

  it('getInstance initializes a singleton class', async () => {
    const t = ServiceRegistryFactory.getInstance(registration, serviceRegistry);
    expect(t).toBeDefined();
  });
});
